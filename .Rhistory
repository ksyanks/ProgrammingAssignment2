}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
solve(x)
cacheSolve(makeCacheMatrix(x))
x%*%cacheSolve(makeCacheMatrix(x))
round(x%*%cacheSolve(makeCacheMatrix(x)))
cacheSolve(makeCacheMatrix(x))
debug(cacheSolve)
cacheSolve(makeCacheMatrix(x))
m
nn
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
##list(set = set, get = get,
##    setinv = setinv,
##    getinv = setinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = setinv)
}
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = setinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x <- matrix(c(3,3,44,5,5,4,16,8,7),3,3)
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = aetinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
asetinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
debug(cacheSolve)
cacheSolve(makeCacheMatrix(x))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = 10,
getinv = getinv)
}
debug(cacheSolve)
cacheSolve(makeCacheMatrix(x))
m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve)
m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
debug(makeCacheMatrix)
makeCacheMatrix(x)
x
m
get
setinv
m
getinv
setinv
x
makeCacheMatrix(x)
makeCacheMatrix(x)
debug(cacheSolve)
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
ix <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
debug(makeCacheMatrix)
cacheSolve(makeCacheMatrix(x))
nn
x
ix
m
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(makeCacheMatrix(x))
m
cacheSolve(makeCacheMatrix(x))
m
m <aa
m <- 111
makeCacheMatrix(x)
x
}
get
get()
get(x)
test()
x=2
get<-function(x){
test<- function () x<<-10
test()
x
}
get
get.test
get$test
get$test()
s <-get()
s
x
x=2
get<-function(x){
test<- function () x<<-10
##test()
x
}
s <-get()
s <-get(10)
s
s <-get
s
s <-get()
s <-get(1)
s
x=2
get<-function(x){
test<- function () x<<-10
test()
x
}
s <-get(1)
s
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(aset = set, bget = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(makeCacheMatrix(x))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- matrix(c(3,3,44,5,5,4,16,8,7),3,3)
mVec <- makeVector(c(1,2,3))
cachemean(mVec)
cachemean(mVec)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(aset = set, bget = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x
cacheSolve(x)
mymax <- makeCacheMatrix(x)
cacheSolve(mymax)
x
mymax
mVec <- makeVector(c(1,2,3))
mvec
mvec()
cachemean(mvec)
mVec
mVec()
cachemean(mVec)
cachemean(mVec)
cacheSolve(mymax)
mymax
mymax <- makeCacheMatrix(x)
x
mVec
mVec()
cachemean(mVec)
mVec <- makeVector(c(1,2,3))
myMax <- makeCacheMareix(x)
myMax <- makeCacheMatrx(x)
myMax <- makeCacheMatrix(x)
cacheSolve(myMax)
debug(cacheSolve)
cacheSolve(myMax)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(myMax)
cacheSolve(myMax)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(myMax)
myMax <- makeCacheMatrix(x)
x
debug(cacheSolve)
cacheSolve(myMax)
data
cacheSolve(myMax)
undebug(cacheSolve)
cacheSolve(myMax)
cacheSolve(myMax)
cacheSolve(myMax)
x <- matrix(c(3,3,44,5,5,4,16,8,10),3,3)
myMax <- makeCacheMatrix(x)
cacheSolve(myMax)
cacheSolve(myMax)
x <- matrix(c(3,3,44,5,5,4,16,8,10,1,2,4,7,10,5,6),4,4)
myMax <- makeCacheMatrix(x)
cacheSolve(myMax)
cacheSolve(myMax)
